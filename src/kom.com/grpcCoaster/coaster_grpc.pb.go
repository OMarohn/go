// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcCoaster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoasterServiceClient is the client API for CoasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoasterServiceClient interface {
	GetCoasters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoastersMessage, error)
	GetCoaster(ctx context.Context, in *CoasterIDMessage, opts ...grpc.CallOption) (*CoasterMessage, error)
	CreateCoaster(ctx context.Context, in *CoasterMessage, opts ...grpc.CallOption) (*Empty, error)
}

type coasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoasterServiceClient(cc grpc.ClientConnInterface) CoasterServiceClient {
	return &coasterServiceClient{cc}
}

func (c *coasterServiceClient) GetCoasters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoastersMessage, error) {
	out := new(CoastersMessage)
	err := c.cc.Invoke(ctx, "/coaster.CoasterService/getCoasters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coasterServiceClient) GetCoaster(ctx context.Context, in *CoasterIDMessage, opts ...grpc.CallOption) (*CoasterMessage, error) {
	out := new(CoasterMessage)
	err := c.cc.Invoke(ctx, "/coaster.CoasterService/getCoaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coasterServiceClient) CreateCoaster(ctx context.Context, in *CoasterMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/coaster.CoasterService/createCoaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoasterServiceServer is the server API for CoasterService service.
// All implementations must embed UnimplementedCoasterServiceServer
// for forward compatibility
type CoasterServiceServer interface {
	GetCoasters(context.Context, *Empty) (*CoastersMessage, error)
	GetCoaster(context.Context, *CoasterIDMessage) (*CoasterMessage, error)
	CreateCoaster(context.Context, *CoasterMessage) (*Empty, error)
	mustEmbedUnimplementedCoasterServiceServer()
}

// UnimplementedCoasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoasterServiceServer struct {
}

func (UnimplementedCoasterServiceServer) GetCoasters(context.Context, *Empty) (*CoastersMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoasters not implemented")
}
func (UnimplementedCoasterServiceServer) GetCoaster(context.Context, *CoasterIDMessage) (*CoasterMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoaster not implemented")
}
func (UnimplementedCoasterServiceServer) CreateCoaster(context.Context, *CoasterMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoaster not implemented")
}
func (UnimplementedCoasterServiceServer) mustEmbedUnimplementedCoasterServiceServer() {}

// UnsafeCoasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoasterServiceServer will
// result in compilation errors.
type UnsafeCoasterServiceServer interface {
	mustEmbedUnimplementedCoasterServiceServer()
}

func RegisterCoasterServiceServer(s grpc.ServiceRegistrar, srv CoasterServiceServer) {
	s.RegisterService(&CoasterService_ServiceDesc, srv)
}

func _CoasterService_GetCoasters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoasterServiceServer).GetCoasters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coaster.CoasterService/getCoasters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoasterServiceServer).GetCoasters(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoasterService_GetCoaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoasterIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoasterServiceServer).GetCoaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coaster.CoasterService/getCoaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoasterServiceServer).GetCoaster(ctx, req.(*CoasterIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoasterService_CreateCoaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoasterMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoasterServiceServer).CreateCoaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coaster.CoasterService/createCoaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoasterServiceServer).CreateCoaster(ctx, req.(*CoasterMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// CoasterService_ServiceDesc is the grpc.ServiceDesc for CoasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coaster.CoasterService",
	HandlerType: (*CoasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCoasters",
			Handler:    _CoasterService_GetCoasters_Handler,
		},
		{
			MethodName: "getCoaster",
			Handler:    _CoasterService_GetCoaster_Handler,
		},
		{
			MethodName: "createCoaster",
			Handler:    _CoasterService_CreateCoaster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coaster.proto",
}
